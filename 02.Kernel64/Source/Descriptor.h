#ifndef _DESCRIPTOR_H_
#define _DESCRIPTOR_H_

#include "Types.h"

#define GDT_TYPE_CODE 0x0A
#define GDT_TYPE_DATA 0x02
#define GDT_TYPE_TSS 0x09
#define GDT_FLAGS_LOWER_S 0x10
#define GDT_FLAGS_LOWER_DPL0 0x00
#define GDT_FLAGS_LOWER_DPL1 0x20
#define GDT_FLAGS_LOWER_DPL2 0x40
#define GDT_FLAGS_LOWER_DPL3 0x60
#define GDT_FLAGS_LOWER_P 0x80
#define GDT_FLAGS_UPPER_L 0x20
#define GDT_FLAGS_UPPER_DB 0x40
#define GDT_FLAGS_UPPER_G 0x80
#define GDT_FLAGS_LOWER_KERNELCODE (GDT_TYPE_CODE|GDT_FLAGS_LOWER_S|GDT_FLAGS_LOWER_DPL0|GDT_FLAGS_LOWER_P)
#define GDT_FLAGS_LOWER_KERNELDATA (GDT_TYPE_DATA|GDT_FLAGS_LOWER_S|GDT_FLAGS_LOWER_DPL0|GDT_FLAGS_LOWER_P)
#define GDT_FLAGS_LOWER_TSS (GDT_FLAGS_LOWER_DPL0|GDT_FLAGS_LOWER_P)
#define GDT_FLAGS_LOWER_USERCODE (GDT_TYPE_CODE|GDT_FLAGS_LOWER_S|GDT_FLAGS_LOWER_DPL3|GDT_FLAGS_LOWER_P)
#define GDT_FLAGS_LOWER_USERDATA (GDT_TYPE_DATA|GDT_FLAGS_LOWER_S|GDT_FLAGS_LOWER_DPL3|GDT_FLAGS_LOWER_P)
#define GDT_FLAGS_UPPER_CODE (GDT_FLAGS_UPPER_G|GDT_FLAGS_UPPER_L)
#define GDT_FLAGS_UPPER_DATA (GDT_FLAGS_UPPER_G|GDT_FLAGS_UPPER_L)
#define GDT_FLAGS_UPPER_TSS (GDT_FLAGS_UPPER_G)
#define GDT_KERNELCODESEGMENT 0x08
#define GDT_KERNELDATASEGMENT 0x10
#define GDT_TSSSEGMENT 0x18
#define GDTR_STARTADDRESS 0x142000
#define GDT_MAXENTRY8COUNT 3
#define GDT_MAXENTRY16COUNT (MAXPROCESSORCOUNT)
#define GDT_TABLESIZE ((sizeof(GDTENTRY8)*GDT_MAXENTRY8COUNT)+(sizeof(GDTENTRY16)*GDT_MAXENTRY16COUNT))
#define TSS_SEGMENTSIZE (sizeof(TSSSEGMENT)*MAXPROCESSORCOUNT)
#define IDT_TYPE_INTERRUPT 0x0E
#define IDT_TYPE_TRAP 0x0F
#define IDT_FLAGS_DPL0 0x00
#define IDT_FLAGS_DPL1 0x02
#define IDT_FLAGS_DPL2 0x04
#define IDT_FLAGS_DPL3 0x06
#define IDT_FLAGS_P 0x80
#define IDT_FLAGS_IST0 0
#define IDT_FLAGS_IST1 1
#define IDT_FLAGS_KERNEL (IDT_FLAGS_DPL0|IDT_FLAGS_P)
#define IDT_FLAGS_USER (IDT_FLAGS_DPL3|IDT_FLAGS_P)
#define IDT_MAXENTRYCOUNT 100
#define IDTR_STARTADDRESS (GDTR_STARTADDRESS+sizeof(GDTR)+GDT_TABLESIZE+TSS_SEGMENTSIZE)
#define IDT_STARTADDRESS (IDTR_STARTADDRESS+sizeof(IDTR))
#define IDT_TABLESIZE (IDT_MAXENTRYCOUNT*sizeof(IDTENTRY))
#define IST_STARTADDRESS 0x700000
#define IST_SIZE 0x100000

#pragma pack(push , 1)

typedef struct GDTRStruct {
	WORD Limit;
	QWORD BaseAddress;
	WORD Pading;
	DWORD PadingP;
}GDTR , IDTR;

typedef struct GDTEntry8Struct {
	WORD LowerLimit;
	WORD LowerBaseAddress;
	BYTE UpperBaseAddress1;
	BYTE TypeAndLowerFlag;
	BYTE UpperLimitAndUpperFlag;
	BYTE UpperBaseAddress2;
}GDTENTRY8;

typedef struct GDTEntry16Struct {
	WORD LowerLimit;
	WORD LowerBaseAddress;
	BYTE MiddleBaseAddress1;
	BYTE TypeAndLowerFlag;
	BYTE UpperLimitAndUpperFlag;
	BYTE MiddleBaseAddress2;
	DWORD UpperBaseAddress;
	DWORD Reserved;
}GDTENTRY16;

typedef struct TSSDataStruct {
	DWORD Reserved1;
	QWORD Rsp[3];
	QWORD Reserved2;
	QWORD IST[7];
	QWORD Reserved3;
	WORD Reserved;
	WORD IOMapBaseAddress;
}TSSSEGMENT;

typedef struct IDTEntryStruct {
	WORD LowerBaseAddress;
	WORD SegmentSelector;
	BYTE IST;
	BYTE TypeAndFlags;
	WORD MiddleBaseAddress;
	DWORD UpperBaseAddress;
	DWORD Reserved;
}IDTENTRY;

#pragma pack(pop)

void InitGDTTableAndTSS(void);
void SetGDTEntry8(GDTENTRY8 *Entry , DWORD BaseAddress , DWORD Limit , BYTE UpperFlags , BYTE LowerFlags , BYTE Type);
void SetGDTEntry16(GDTENTRY16 *Entry , QWORD BaseAddress , DWORD Limit , BYTE UpperFlags , BYTE LowerFlags , BYTE Type);
void InitTSSSegment(TSSSEGMENT *TSS);
void InitIDTTable(void);
void SetIDTEntry(IDTENTRY *Entry , void *Handler , WORD Selector , BYTE IST , BYTE Flags , BYTE Types);
void DummyHandler(void);

#endif
